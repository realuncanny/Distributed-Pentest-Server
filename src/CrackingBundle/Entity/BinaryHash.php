<?php

namespace CrackingBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * BinaryHash
 *
 * @ORM\Table(name="cracking_hash_binary")
 * @ORM\Entity(repositoryClass="CrackingBundle\Repository\BinaryHashRepository")
 */
class BinaryHash
{


    /**
     * @var string
     * @ORM\Id
     * @ORM\Column(name="essid", type="string", length=36)
     */
    private $essid;

    /**
     * @var string
     *
     * @ORM\Column(name="MAC1", type="string", length=12, nullable=true)
     */
    private $MAC1;

    /**
     * @var string
     *
     * @ORM\Column(name="MAC2", type="string", length=12, nullable=true)
     */
    private $MAC2;

    /**
     * @var string
     *
     * @ORM\Column(name="hash", type="blob")
     */
    private $hash;

    /**
     * @var string
     *
     * @ORM\Column(name="plainText", type="string", length=255, nullable=true)
     */
    private $plainText;

    /**
     * @var int
     *
     * @ORM\Column(name="time", type="bigint", nullable=true)
     */
    private $time;

    /**
     * @ORM\ManyToOne(targetEntity="Chunk", inversedBy="binaryHashes")
     * @ORM\JoinColumn(name="chunk_id", referencedColumnName="id")
     */
    private $chunk;

    /**
     * @ORM\Id
     * @ORM\ManyToOne(targetEntity="HashList", inversedBy="binaryHashes")
     * @ORM\JoinColumn(name="hash_list_id", referencedColumnName="id")
     */
    private $hashList;

    /**
     * Set essid
     *
     * @param string $essid
     *
     * @return BinaryHash
     */
    public function setEssid($essid)
    {
        $this->essid = $essid;

        return $this;
    }

    /**
     * Get essid
     *
     * @return string
     */
    public function getEssid()
    {
        return $this->essid;
    }

    /**
     * Set MAC1
     *
     * @param string $MAC1
     *
     * @return BinaryHash
     */
    public function setMAC1($MAC1)
    {
        $this->MAC1 = $MAC1;

        return $this;
    }

    /**
     * Get MAC1
     *
     * @return string
     */
    public function getMAC1()
    {
        return $this->MAC1;
    }

    /**
     * Set MAC2
     *
     * @param string $MAC2
     *
     * @return BinaryHash
     */
    public function setMAC2($MAC2)
    {
        $this->MAC2 = $MAC2;

        return $this;
    }

    /**
     * Get MAC2
     *
     * @return string
     */
    public function getMAC2()
    {
        return $this->MAC2;
    }

    /**
     * Set hash
     *
     * @param string $hash
     *
     * @return BinaryHash
     */
    public function setHash($hash)
    {
        $this->hash = $hash;

        return $this;
    }

    /**
     * Get hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * Set plainText
     *
     * @param string $plainText
     *
     * @return BinaryHash
     */
    public function setPlainText($plainText)
    {
        $this->plainText = $plainText;

        return $this;
    }

    /**
     * Get plainText
     *
     * @return string
     */
    public function getPlainText()
    {
        return $this->plainText;
    }

    /**
     * Set time
     *
     * @param integer $time
     *
     * @return BinaryHash
     */
    public function setTime($time)
    {
        $this->time = $time;

        return $this;
    }

    /**
     * Get time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * @return mixed
     */
    public function getChunk()
    {
        return $this->chunk;
    }

    /**
     * @param mixed $chunk
     *
     * @return BinaryHash
     */
    public function setChunk($chunk)
    {
        $this->chunk = $chunk;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getHashList()
    {
        return $this->hashList;
    }

    /**
     * @param mixed $hashList
     *
     * @return BinaryHash
     */
    public function setHashList($hashList)
    {
        $this->hashList = $hashList;
        return $this;
    }


}


<?php

namespace CrackingBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * HashList
 *
 * @ORM\Table(name="cracking_hash_list")
 * @ORM\Entity(repositoryClass="CrackingBundle\Repository\HashListRepository")
 */
class HashList
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, unique=true)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="format", type="string", length=10)
     */
    private $format;

    /**
     * @var int
     *
     * @ORM\Column(name="hashcount", type="bigint")
     */
    private $hashcount;

    /**
     * @var int
     *
     * @ORM\Column(name="cracked", type="bigint")
     */
    private $cracked;

    /**
     * @var bool
     *
     * @ORM\Column(name="public", type="boolean")
     */
    private $public;

    /**
     * @var bool
     *
     * @ORM\Column(name="super", type="boolean")
     */
    private $super;

    /**
     * @ORM\ManyToMany(targetEntity="Agent", mappedBy="hashLists")
     */
    private $agents;

    /**
     * @ORM\OneToMany(targetEntity="ZapQueue", mappedBy="hashList")
     */
    private $zapQueues;

    /**
     * @ORM\OneToMany(targetEntity="BinaryHash", mappedBy="hashList")
     */
    private $binaryHashes;


    /**
     * HashList constructor.
     */
    public function __construct() {
        $this->agents = new ArrayCollection();
        $this->zapQueues = new ArrayCollection();
        $this->binaryHashes = new ArrayCollection();

    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return HashList
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set format
     *
     * @param string $format
     *
     * @return HashList
     */
    public function setFormat($format)
    {
        $this->format = $format;

        return $this;
    }

    /**
     * Get format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * Set hashcount
     *
     * @param integer $hashcount
     *
     * @return HashList
     */
    public function setHashcount($hashcount)
    {
        $this->hashcount = $hashcount;

        return $this;
    }

    /**
     * Get hashcount
     *
     * @return int
     */
    public function getHashcount()
    {
        return $this->hashcount;
    }

    /**
     * Set cracked
     *
     * @param integer $cracked
     *
     * @return HashList
     */
    public function setCracked($cracked)
    {
        $this->cracked = $cracked;

        return $this;
    }

    /**
     * Get cracked
     *
     * @return int
     */
    public function getCracked()
    {
        return $this->cracked;
    }

    /**
     * Set public
     *
     * @param boolean $public
     *
     * @return HashList
     */
    public function setPublic($public)
    {
        $this->public = $public;

        return $this;
    }

    /**
     * Get public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->public;
    }

    /**
     * @return bool
     */
    public function isSuper()
    {
        return $this->super;
    }

    /**
     * @param bool $super
     *
     * @return HashList
     */
    public function setSuper($super)
    {
        $this->super = $super;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getAgents()
    {
        return $this->agents;
    }

    /**
     * @param mixed $agents
     *
     * @return HashList
     */
    public function setAgents($agents)
    {
        $this->agents = $agents;
        return $this;
    }


    /**
     * @param Agent $agent
     *
     * @return HashList
     */
    public function addAgent(Agent $agent)
    {
        $this->agents[] = $agent;
        return $this;
    }

    /**
     * @param Agent $agent
     *
     * @return HashList
     */
    public function removeAgent(Agent $agent)
    {
        $this->agents->removeElement($agent);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getZapQueues()
    {
        return $this->zapQueues;
    }

    /**
     * @param mixed $zapQueues
     *
     * @return HashList
     */
    public function setZapQueues($zapQueues)
    {
        $this->zapQueues = $zapQueues;
        return $this;
    }

    /**
     * @param ZapQueue $zapQueue
     *
     * @return HashList
     */
    public function addZapQueue(ZapQueue $zapQueue)
    {
        $this->zapQueues[] = $zapQueue;
        return $this;
    }

    /**
     * @param ZapQueue $zapQueue
     *
     * @return HashList
     */
    public function removeZapQueue(ZapQueue $zapQueue)
    {
        $this->zapQueues->removeElement($zapQueue);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getBinaryHashes()
    {
        return $this->binaryHashes;
    }

    /**
     * @param mixed $binaryHashes
     *
     * @return HashList
     */
    public function setBinaryHashes($binaryHashes)
    {
        $this->binaryHashes = $binaryHashes;
        return $this;
    }

    /**
     * @param BinaryHash $binaryHash
     *
     * @return HashList
     */
    public function addBinaryHash(BinaryHash $binaryHash)
    {
        $this->binaryHashes[] = $binaryHash;
        return $this;
    }

    /**
     * @param BinaryHash $binaryHash
     *
     * @return HashList
     */
    public function removeBinaryHash(BinaryHash $binaryHash)
    {
        $this->binaryHashes->removeElement($binaryHash);
        return $this;
    }
}


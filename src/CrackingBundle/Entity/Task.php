<?php

namespace CrackingBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Task
 *
 * @ORM\Table(name="cracking_task",indexes={@ORM\Index(name="autoassign", columns={"progress", "keySpace", "priority"})})
 * @ORM\Entity(repositoryClass="CrackingBundle\Repository\TaskRepository")
 */
class Task
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, unique=true)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="command", type="string", length=256)
     */
    private $command;

    /**
     * @var int
     *
     * @ORM\Column(name="chunkTime", type="integer")
     */
    private $chunkTime;

    /**
     * @var int
     *
     * @ORM\Column(name="statusTimer", type="integer")
     */
    private $statusTimer;

    /**
     * @var int
     *
     * @ORM\Column(name="autoAdjust", type="smallint", nullable=true)
     */
    private $autoAdjust;

    /**
     * @var int
     *
     * @ORM\Column(name="keySpace", type="bigint", nullable=true)
     */
    private $keySpace;

    /**
     * @var int
     *
     * @ORM\Column(name="progress", type="bigint", nullable=true)
     */
    private $progress;

    /**
     * @var int
     *
     * @ORM\Column(name="priority", type="integer", nullable=true)
     */
    private $priority;

    /**
     * @var string
     *
     * @ORM\Column(name="color", type="string", length=6, nullable=true)
     */
    private $color;

    /**
     * @ORM\ManyToMany(targetEntity="FIle", inversedBy="tasks")
     * @ORM\JoinTable(name="cracking_task_file")
     */
    private $files;

    /**
     * @ORM\OneToMany(targetEntity="Chunk", mappedBy="task")
     */
    private $chunks;

    /**
     * @ORM\OneToMany(targetEntity="Assignment", mappedBy="task")
     */
    private $assignments;

    /**
     * @ORM\OneToMany(targetEntity="Error", mappedBy="task")
     */
    private $errors;

    /**
     * Task constructor.
     */
    public function __construct() {
        $this->files = new ArrayCollection();
        $this->chunks = new ArrayCollection();
        $this->assignments = new ArrayCollection();
        $this->errors = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Task
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set command
     *
     * @param string $command
     *
     * @return Task
     */
    public function setCommand($command)
    {
        $this->command = $command;

        return $this;
    }

    /**
     * Get command
     *
     * @return string
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * Set chunkTime
     *
     * @param integer $chunkTime
     *
     * @return Task
     */
    public function setChunkTime($chunkTime)
    {
        $this->chunkTime = $chunkTime;

        return $this;
    }

    /**
     * Get chunkTime
     *
     * @return int
     */
    public function getChunkTime()
    {
        return $this->chunkTime;
    }

    /**
     * Set statusTimer
     *
     * @param integer $statusTimer
     *
     * @return Task
     */
    public function setStatusTimer($statusTimer)
    {
        $this->statusTimer = $statusTimer;

        return $this;
    }

    /**
     * Get statusTimer
     *
     * @return int
     */
    public function getStatusTimer()
    {
        return $this->statusTimer;
    }

    /**
     * Set autoAdjust
     *
     * @param integer $autoAdjust
     *
     * @return Task
     */
    public function setAutoAdjust($autoAdjust)
    {
        $this->autoAdjust = $autoAdjust;

        return $this;
    }

    /**
     * Get autoAdjust
     *
     * @return int
     */
    public function getAutoAdjust()
    {
        return $this->autoAdjust;
    }

    /**
     * Set keySpace
     *
     * @param integer $keySpace
     *
     * @return Task
     */
    public function setKeySpace($keySpace)
    {
        $this->keySpace = $keySpace;

        return $this;
    }

    /**
     * Get keySpace
     *
     * @return int
     */
    public function getKeySpace()
    {
        return $this->keySpace;
    }

    /**
     * Set progress
     *
     * @param integer $progress
     *
     * @return Task
     */
    public function setProgress($progress)
    {
        $this->progress = $progress;

        return $this;
    }

    /**
     * Get progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->progress;
    }

    /**
     * Set priority
     *
     * @param integer $priority
     *
     * @return Task
     */
    public function setPriority($priority)
    {
        $this->priority = $priority;

        return $this;
    }

    /**
     * Get priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Set color
     *
     * @param string $color
     *
     * @return Task
     */
    public function setColor($color)
    {
        $this->color = $color;

        return $this;
    }

    /**
     * Get color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->color;
    }

    /**
     * @return mixed
     */
    public function getFiles()
    {
        return $this->files;
    }

    /**
     * @param mixed $files
     *
     * @return Task
     */
    public function setFiles($files)
    {
        $this->files = $files;
        return $this;
    }

    /**
     * @param File $file
     *
     * @return Task
     */
    public function addFile(File $file)
    {
        $this->files[] = $file;
        return $this;
    }

    /**
     * @param File $file
     *
     * @return Task
     */
    public function removeFile(File $file)
    {
        $this->files->removeElement($file);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getChunks()
    {
        return $this->chunks;
    }

    /**
     * @param mixed $chunks
     *
     * @return Task
     */
    public function setChunks($chunks)
    {
        $this->chunks = $chunks;
        return $this;
    }

    /**
     * @param Chunk $chunk
     *
     * @return Task
     */
    public function addChunk(Chunk $chunk)
    {
        $this->chunks[] = $chunk;
        return $this;
    }

    /**
     * @param Chunk $chunk
     *
     * @return Task
     */
    public function removeChunk(Chunk $chunk)
    {
        $this->chunks->removeElement($chunk);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getAssignments()
    {
        return $this->assignments;
    }

    /**
     * @param mixed $assignments
     *
     * @return Task
     */
    public function setAssignments($assignments)
    {
        $this->assignments = $assignments;
        return $this;
    }

    /**
     * @param Assignment $assignment
     *
     * @return Task
     */
    public function addAssignment(Assignment $assignment)
    {
        $this->assignments[] = $assignment;
        return $this;
    }

    /**
     * @param Assignment $assignment
     *
     * @return Task
     */
    public function removeAssignment(Assignment $assignment)
    {
        $this->assignments->removeElement($assignment);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * @param mixed $errors
     *
     * @return Task
     */
    public function setErrors($errors)
    {
        $this->errors = $errors;
        return $this;
    }

    /**
     * @param Error $error
     *
     * @return Task
     */
    public function addError(Error $error)
    {
        $this->errors[] = $error;
        return $this;
    }

    /**
     * @param Error $error
     *
     * @return Task
     */
    public function removeError(Error $error)
    {
        $this->errors->removeElement($error);
        return $this;
    }
}


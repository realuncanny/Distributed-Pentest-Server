<?php

namespace CrackingBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Chunk
 *
 * @ORM\Table(name="cracking_chunk",indexes={@ORM\Index(name="chunk_redispatch", columns={"task_id", "agent_id", "progress",
 *      "keyspaceLength","solveTime", "keyspaceSkip" })})
 * @ORM\Entity(repositoryClass="CrackingBundle\Repository\ChunkRepository")
 */
class Chunk
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var int
     *
     * @ORM\Column(name="keyspaceSkip", type="bigint")
     */
    private $keyspaceSkip;

    /**
     * @var int
     *
     * @ORM\Column(name="keyspaceLength", type="bigint")
     */
    private $keyspaceLength;

    /**
     * @var int
     *
     * @ORM\Column(name="dispatchTime", type="bigint")
     */
    private $dispatchTime;

    /**
     * @var int
     *
     * @ORM\Column(name="progress", type="bigint")
     */
    private $progress;

    /**
     * @var int
     *
     * @ORM\Column(name="realProgress", type="smallint")
     */
    private $realProgress;

    /**
     * @var int
     *
     * @ORM\Column(name="state", type="smallint")
     */
    private $state;

    /**
     * @var int
     *
     * @ORM\Column(name="cracked", type="integer")
     */
    private $cracked;

    /**
     * @var int
     *
     * @ORM\Column(name="solveTime", type="bigint")
     */
    private $solveTime;

    /**
     * @ORM\ManyToOne(targetEntity="Agent", inversedBy="chunks")
     * @ORM\JoinColumn(name="agent_id", referencedColumnName="id")
     */
    private $agent;

    /**
     * @ORM\ManyToOne(targetEntity="Task", inversedBy="chunks")
     * @ORM\JoinColumn(name="task_id", referencedColumnName="id")
     */
    private $task;


    /**
     * @ORM\OneToMany(targetEntity="ZapQueue", mappedBy="chunk")
     */
    private $zapQueues;

    /**
     * @ORM\OneToMany(targetEntity="BinaryHash", mappedBy="chunk")
     */
    private $binaryHashes;

    /**
     * Chunk constructor.
     */
    public function __construct()
    {
        $this->zapQueues = new ArrayCollection();
        $this->binaryHashes = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set keyspaceSkip
     *
     * @param integer $keyspaceSkip
     *
     * @return Chunk
     */
    public function setKeyspaceSkip($keyspaceSkip)
    {
        $this->keyspaceSkip = $keyspaceSkip;

        return $this;
    }

    /**
     * Get keyspaceSkip
     *
     * @return int
     */
    public function getKeyspaceSkip()
    {
        return $this->keyspaceSkip;
    }

    /**
     * Set keyspaceLength
     *
     * @param integer $keyspaceLength
     *
     * @return Chunk
     */
    public function setKeyspaceLength($keyspaceLength)
    {
        $this->keyspaceLength = $keyspaceLength;

        return $this;
    }

    /**
     * Get keyspaceLength
     *
     * @return int
     */
    public function getKeyspaceLength()
    {
        return $this->keyspaceLength;
    }

    /**
     * Set dispatchTime
     *
     * @param integer $dispatchTime
     *
     * @return Chunk
     */
    public function setDispatchTime($dispatchTime)
    {
        $this->dispatchTime = $dispatchTime;

        return $this;
    }

    /**
     * Get dispatchTime
     *
     * @return int
     */
    public function getDispatchTime()
    {
        return $this->dispatchTime;
    }

    /**
     * Set progress
     *
     * @param integer $progress
     *
     * @return Chunk
     */
    public function setProgress($progress)
    {
        $this->progress = $progress;

        return $this;
    }

    /**
     * Get progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->progress;
    }

    /**
     * Set realProgress
     *
     * @param integer $realProgress
     *
     * @return Chunk
     */
    public function setRealProgress($realProgress)
    {
        $this->realProgress = $realProgress;

        return $this;
    }

    /**
     * Get realProgress
     *
     * @return int
     */
    public function getRealProgress()
    {
        return $this->realProgress;
    }

    /**
     * Set state
     *
     * @param integer $state
     *
     * @return Chunk
     */
    public function setState($state)
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Get state
     *
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set cracked
     *
     * @param integer $cracked
     *
     * @return Chunk
     */
    public function setCracked($cracked)
    {
        $this->cracked = $cracked;

        return $this;
    }

    /**
     * Get cracked
     *
     * @return int
     */
    public function getCracked()
    {
        return $this->cracked;
    }

    /**
     * Set solveTime
     *
     * @param integer $solveTime
     *
     * @return Chunk
     */
    public function setSolveTime($solveTime)
    {
        $this->solveTime = $solveTime;

        return $this;
    }

    /**
     * Get solveTime
     *
     * @return int
     */
    public function getSolveTime()
    {
        return $this->solveTime;
    }

    /**
     * @return mixed
     */
    public function getAgent()
    {
        return $this->agent;
    }

    /**
     * @param mixed $agent
     *
     * @return Chunk
     */
    public function setAgent($agent)
    {
        $this->agent = $agent;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getTask()
    {
        return $this->task;
    }

    /**
     * @param mixed $task
     *
     * @return Chunk
     */
    public function setTask($task)
    {
        $this->task = $task;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getZapQueues()
    {
        return $this->zapQueues;
    }

    /**
     * @param mixed $zapQueues
     *
     * @return Chunk
     */
    public function setZapQueues($zapQueues)
    {
        $this->zapQueues = $zapQueues;
        return $this;
    }

    /**
     * @param ZapQueue $zapQueue
     *
     * @return Chunk
     */
    public function addZapQueue(ZapQueue $zapQueue)
    {
        $this->zapQueues[] = $zapQueue;
        return $this;
    }

    /**
     * @param ZapQueue $zapQueue
     *
     * @return Chunk
     */
    public function removeZapQueue(ZapQueue $zapQueue)
    {
        $this->zapQueues->removeElement($zapQueue);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getBinaryHashes()
    {
        return $this->binaryHashes;
    }

    /**
     * @param mixed $binaryHashes
     *
     * @return Chunk
     */
    public function setBinaryHashes($binaryHashes)
    {
        $this->binaryHashes = $binaryHashes;
        return $this;
    }

    /**
     * @param BinaryHash $binaryHash
     *
     * @return Chunk
     */
    public function addBinaryHash(BinaryHash $binaryHash)
    {
        $this->binaryHashes[] = $binaryHash;
        return $this;
    }

    /**
     * @param BinaryHash $binaryHash
     *
     * @return Chunk
     */
    public function removeBinaryHash(BinaryHash $binaryHash)
    {
        $this->binaryHashes->removeElement($binaryHash);
        return $this;
    }
}


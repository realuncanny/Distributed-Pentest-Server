<?php

namespace CrackingBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Agent
 *
 * @ORM\Table(name="cracking_agent")
 * @ORM\Entity(repositoryClass="CrackingBundle\Repository\AgentRepository")
 */
class Agent
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="UID", type="string", length=255, unique=true)
     */
    private $UID;

    /**
     * @var string
     *
     * @ORM\Column(name="OS", type="string", length=20)
     */
    private $OS;

    /**
     * @var bool
     *
     * @ORM\Column(name="active", type="boolean")
     */
    private $active;

    /**
     * @ORM\ManyToMany(targetEntity="HashList", inversedBy="agents")
     * @ORM\JoinTable(name="cracking_agent_hash_list")
     */
    private $hashLists;


    /**
     * @ORM\OneToMany(targetEntity="Chunk", mappedBy="agent")
     */
    private $chunks;


    /**
     * @ORM\OneToMany(targetEntity="Assignment", mappedBy="agent")
     */
    private $assignments;

    /**
     * @ORM\OneToMany(targetEntity="Zapqueue", mappedBy="agent")
     */
    private $zapqueues;

    /**
     * @ORM\OneToMany(targetEntity="Error", mappedBy="agent")
     */
    private $errors;


    /**
     * Agent constructor.
     */
    public function __construct()
    {
        $this->hashLists = new ArrayCollection();
        $this->chunks = new ArrayCollection();
        $this->assignments = new ArrayCollection();
        $this->zapqueues = new ArrayCollection();
        $this->errors = new ArrayCollection();
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Agent
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set uID
     *
     * @param string $UID
     *
     * @return Agent
     */
    public function setUID($UID)
    {
        $this->UID = $UID;

        return $this;
    }

    /**
     * Get UID
     *
     * @return string
     */
    public function getUID()
    {
        return $this->UID;
    }

    /**
     * Set oS
     *
     * @param string $OS
     *
     * @return Agent
     */
    public function setOS($OS)
    {
        $this->OS = $OS;

        return $this;
    }

    /**
     * Get OS
     *
     * @return string
     */
    public function getOS()
    {
        return $this->OS;
    }

    /**
     * Set active
     *
     * @param boolean $active
     *
     * @return Agent
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * @return mixed
     */
    public function getHashLists()
    {
        return $this->hashLists;
    }

    /**
     * @param mixed $hashLists
     *
     * @return Agent
     */
    public function setHashLists($hashLists)
    {
        $this->hashLists = $hashLists;
        return $this;
    }

    /**
     * @param HashList $hashList
     *
     * @return Agent
     */
    public function addHashList(HashList $hashList)
    {
        $this->hashLists[] = $hashList;
        return $this;
    }

    /**
     * @param HashList $hashList
     *
     * @return Agent
     */
    public function removeHashList(HashList $hashList)
    {
        $this->hashLists->removeElement($hashList);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getChunks()
    {
        return $this->chunks;
    }

    /**
     * @param mixed $chunks
     *
     * @return Agent
     */
    public function setChunks($chunks)
    {
        $this->chunks = $chunks;
        return $this;
    }

    /**
     * @param Chunk $chunk
     *
     * @return Agent
     */
    public function addChunk(Chunk $chunk)
    {
        $this->chunks[] = $chunk;
        return $this;
    }

    /**
     * @param Chunk $chunk
     *
     * @return Agent
     */
    public function removeChunk(Chunk $chunk)
    {
        $this->chunks->removeElement($chunk);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getAssignments()
    {
        return $this->assignments;
    }

    /**
     * @param mixed $assignments
     *
     * @return Agent
     */
    public function setAssignments($assignments)
    {
        $this->assignments = $assignments;
        return $this;
    }

    /**
     * @param Assignment $assignment
     *
     * @return Agent
     */
    public function addAssignment(Assignment $assignment)
    {
        $this->assignments[] = $assignment;
        return $this;
    }

    /**
     * @param Assignment $assignment
     *
     * @return Agent
     */
    public function removeAssignment(Assignment $assignment)
    {
        $this->assignments->removeElement($assignment);
        return $this;
    }


    /**
     * @return mixed
     */
    public function getZapqueues()
    {
        return $this->zapqueues;
    }

    /**
     * @param mixed $zapqueues
     *
     * @return Agent
     */
    public function setZapqueues($zapqueues)
    {
        $this->zapqueues = $zapqueues;
        return $this;
    }

    /**
     * @param Zapqueue $zapqueue
     *
     * @return Agent
     */
    public function addZapqueue(Zapqueue $zapqueue)
    {
        $this->zapqueues[] = $zapqueue;
        return $this;
    }

    /**
     * @param Zapqueue $zapqueue
     *
     * @return Agent
     */
    public function removeZapqueue(Zapqueue $zapqueue)
    {
        $this->zapqueues->removeElement($zapqueue);
        return $this;
    }

    /**
     * @return mixed
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * @param mixed $errors
     *
     * @return Agent
     */
    public function setErrors($errors)
    {
        $this->errors = $errors;
        return $this;
    }

    /**
     * @param Error $error
     *
     * @return Agent
     */
    public function addError(Error $error)
    {
        $this->errors[] = $error;
        return $this;
    }

    /**
     * @param Error $error
     *
     * @return Agent
     */
    public function removeError(Error $error)
    {
        $this->errors->removeElement($error);
        return $this;
    }
}

